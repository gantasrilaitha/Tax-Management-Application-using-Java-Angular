{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/tax.service\";\nimport * as i2 from \"@angular/common\";\nfunction TaxManagementComponent_tr_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\")(8, \"button\");\n    i0.ɵɵtext(9, \"Select\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"button\");\n    i0.ɵɵtext(11, \"Update\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"button\");\n    i0.ɵɵtext(13, \"Delete\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const tax_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(tax_r1.formType);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(tax_r1.filingDate);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(tax_r1.totalTaxAmount);\n  }\n}\nexport class TaxManagementComponent {\n  constructor(taxService) {\n    this.taxService = taxService;\n    this.taxes = [];\n    this.selectedTax = {\n      taxFormId: 0,\n      formType: '',\n      filingDate: new Date(),\n      totalTaxAmount: 0,\n      userId: 0\n    };\n  }\n  ngOnInit() {\n    //this.loadTaxes();\n  }\n  loadTaxes() {\n    this.taxService.getAllTaxes().subscribe(data => {\n      this.taxes = data;\n      console.log(data);\n    });\n  }\n  addTax() {}\n  // showUpdateForm(id: number): void {\n  //   // Retrieve tax details and display them in the form\n  //   const selectedTax = this.taxes.find(tax => tax.taxFormId === id);\n  //   if (selectedTax) {\n  //     this.selectedTax = { ...selectedTax };\n  //   }\n  // }\n  // updateTaxApi(): void {\n  //   this.taxService.updateTax(this.selectedTax.taxFormId, this.selectedTax).subscribe(\n  //     () => {\n  //       this.loadTaxes();\n  //       this.selectedTax = this.createEmptyTax(); // Clear the form\n  //     },\n  //     error => {\n  //       console.error('Error updating tax:', error);\n  //     }\n  //   );\n  // }\n  deleteTax(id) {}\n  selectTax(tax) {}\n}\nTaxManagementComponent.ɵfac = function TaxManagementComponent_Factory(t) {\n  return new (t || TaxManagementComponent)(i0.ɵɵdirectiveInject(i1.TaxService));\n};\nTaxManagementComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TaxManagementComponent,\n  selectors: [[\"app-tax-management\"]],\n  decls: 22,\n  vars: 1,\n  consts: [[3, \"click\"], [1, \"table\", \"table-striped\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function TaxManagementComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1, \"Tax Management\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\")(3, \"h2\");\n      i0.ɵɵtext(4, \"Tax Management\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function TaxManagementComponent_Template_button_click_5_listener() {\n        return ctx.loadTaxes();\n      });\n      i0.ɵɵtext(6, \"Refresh Taxes\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"table\", 1)(8, \"thead\")(9, \"tr\")(10, \"th\");\n      i0.ɵɵtext(11, \"FormType\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"th\");\n      i0.ɵɵtext(13, \"FilingDate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"th\");\n      i0.ɵɵtext(15, \"TaxAmount\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"th\");\n      i0.ɵɵtext(17, \"Action\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(18, \"tbody\");\n      i0.ɵɵtemplate(19, TaxManagementComponent_tr_19_Template, 14, 3, \"tr\", 2);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(20, \"h3\");\n      i0.ɵɵtext(21, \"Add Tax\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(19);\n      i0.ɵɵproperty(\"ngForOf\", ctx.taxes);\n    }\n  },\n  dependencies: [i2.NgForOf],\n  styles: [\"mat-form-field[_ngcontent-%COMP%] {\\r\\n    width: 100%;\\r\\n    margin-bottom: 15px;\\r\\n  }\\r\\n  \\r\\n  button[_ngcontent-%COMP%] {\\r\\n    margin-top: 20px;\\r\\n    display: block;\\r\\n    width: 100%;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy90YXgtbWFuYWdlbWVudC90YXgtbWFuYWdlbWVudC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksV0FBVztJQUNYLG1CQUFtQjtFQUNyQjs7RUFFQTtJQUNFLGdCQUFnQjtJQUNoQixjQUFjO0lBQ2QsV0FBVztFQUNiIiwic291cmNlc0NvbnRlbnQiOlsibWF0LWZvcm0tZmllbGQge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xyXG4gIH1cclxuICBcclxuICBidXR0b24ge1xyXG4gICAgbWFyZ2luLXRvcDogMjBweDtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgfVxyXG4gICJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":";;;;;IAeUA,0BAA8B;IACxBA,YAAkB;IAAAA,iBAAK;IAC3BA,0BAAI;IAAAA,YAAoB;IAAAA,iBAAK;IAC7BA,0BAAI;IAAAA,YAAsB;IAAAA,iBAAK;IAC/BA,0BAAI;IAAUA,sBAAM;IAAAA,iBAAS;IACzBA,+BAAS;IAAAA,uBAAM;IAAAA,iBAAS;IACxBA,+BAAS;IAAAA,uBAAM;IAAAA,iBAAS;;;;IALxBA,eAAkB;IAAlBA,qCAAkB;IAClBA,eAAoB;IAApBA,uCAAoB;IACpBA,eAAsB;IAAtBA,2CAAsB;;;ACTtC,OAAM,MAAOC,sBAAsB;EAUjCC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAT9B,UAAK,GAAU,EAAE;IACjB,gBAAW,GAAQ;MACjBC,SAAS,EAAE,CAAC;MACZC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE,IAAIC,IAAI,EAAE;MACtBC,cAAc,EAAE,CAAC;MACjBC,MAAM,EAAE;KACT;EAE6C;EAE9CC,QAAQ;IACN;EAAA;EAGFC,SAAS;IACP,IAAI,CAACR,UAAU,CAACS,WAAW,EAAE,CAACC,SAAS,CACpCC,IAAU,IAAI;MACb,IAAI,CAACC,KAAK,GAAGD,IAAI;MACjBE,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;IACnB,CAAC,CACF;EACH;EAEAI,MAAM,IAEN;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAC,SAAS,CAACC,EAAU,GAEpB;EAEAC,SAAS,CAACC,GAAQ,GAElB;;AAvDWrB,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;QAAtBA,sBAAsB;EAAAsB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDTnC3B,0BAAI;MAAAA,8BAAc;MAAAA,iBAAK;MACvBA,2BAAK;MAEGA,8BAAc;MAAAA,iBAAK;MACvBA,iCAA8B;MAAtBA;QAAA,OAAS4B,eAAW;MAAA,EAAC;MAAC5B,6BAAa;MAAAA,iBAAS;MACpDA,gCAAoC;MAGxBA,yBAAQ;MAAAA,iBAAK;MACjBA,2BAAI;MAAAA,2BAAU;MAAAA,iBAAK;MACnBA,2BAAI;MAAAA,0BAAS;MAAAA,iBAAK;MAClBA,2BAAI;MAAAA,uBAAM;MAAAA,iBAAK;MAGnBA,8BAAO;MACLA,wEASK;MACPA,iBAAQ;MAKhBA,2BAAI;MAAAA,wBAAO;MAAAA,iBAAK;;;MAfcA,gBAAQ;MAARA,mCAAQ","names":["i0","TaxManagementComponent","constructor","taxService","taxFormId","formType","filingDate","Date","totalTaxAmount","userId","ngOnInit","loadTaxes","getAllTaxes","subscribe","data","taxes","console","log","addTax","deleteTax","id","selectTax","tax","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\tax_management_angular_fsd_iiht\\FullStack-Angular-Java-Tax-Management-Solution-main\\Frontend\\src\\app\\components\\tax-management\\tax-management.component.html","D:\\tax_management_angular_fsd_iiht\\FullStack-Angular-Java-Tax-Management-Solution-main\\Frontend\\src\\app\\components\\tax-management\\tax-management.component.ts"],"sourcesContent":["<h1>Tax Management</h1>\n<div>\n\n    <h2>Tax Management</h2>\n    <button (click)=\"loadTaxes()\">Refresh Taxes</button>\n    <table class=\"table table-striped\" >\n        <thead>\n          <tr>\n            <th>FormType</th>\n            <th>FilingDate</th>\n            <th>TaxAmount</th>\n            <th>Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let tax of taxes\">\n            <td>{{ tax.formType }}</td>\n            <td>{{ tax.filingDate }}</td>\n            <td>{{tax.totalTaxAmount}}</td>\n            <td> <button >Select</button>\n                <button >Update</button>\n                <button >Delete</button>\n            \n            </td>\n          </tr>\n        </tbody>\n      </table>\n    \n\n</div>\n<h3>Add Tax</h3>\n<!-- <form #taxForm=\"ngForm\" (ngSubmit)=\"addTax(taxForm)\" novalidate>\n    <div>\n      \n      <mat-form-field appearance=\"fill\">\n        <mat-label>Form Type</mat-label>\n        <input\n          matInput\n          type=\"text\"\n          id=\"formType\"\n          name=\"formType\"\n          [(ngModel)]=\"selectedTax.formType\"\n          required\n        />\n        <mat-error *ngIf=\"formType.invalid && formType.touched\">\n          Form Type cannot be blank.\n        </mat-error>\n      </mat-form-field>\n    </div>\n  \n    <div>\n      \n      <mat-form-field appearance=\"fill\">\n        <mat-label>Filing Date</mat-label>\n        <input\n          matInput\n          [matDatepicker]=\"picker\"\n          id=\"filingDate\"\n          name=\"filingDate\"\n          [(ngModel)]=\"selectedTax.filingDate\"\n          required\n          (dateChange)=\"validateDate($event)\"\n        />\n        <mat-datepicker-toggle\n          matSuffix\n          [for]=\"picker\"\n        ></mat-datepicker-toggle>\n        <mat-datepicker #picker></mat-datepicker>\n        <mat-error *ngIf=\"filingDate.invalid && filingDate.touched\">\n          Filing Date is required and must be a past or present date.\n        </mat-error>\n      </mat-form-field>\n    </div>\n  \n    <div>\n      \n      <mat-form-field appearance=\"fill\">\n        <mat-label>Total Tax Amount</mat-label>\n        <input\n          matInput\n          type=\"number\"\n          id=\"totalTaxAmount\"\n          name=\"totalTaxAmount\"\n          [(ngModel)]=\"selectedTax.totalTaxAmount\"\n          required\n          min=\"0.01\"\n        />\n        <mat-error *ngIf=\"totalTaxAmount.invalid && totalTaxAmount.touched\">\n          Total Tax Amount must be positive and cannot be null.\n        </mat-error>\n      </mat-form-field>\n    </div>\n  \n    <div>\n     \n      <mat-form-field appearance=\"fill\">\n        <mat-label>User ID</mat-label>\n        <input\n          matInput\n          type=\"number\"\n          id=\"userId\"\n          name=\"userId\"\n          [(ngModel)]=\"selectedTax.userId\"\n          required\n        />\n        <mat-error *ngIf=\"userId.invalid && userId.touched\">\n          User ID is required and must be greater than 0.\n        </mat-error>\n      </mat-form-field>\n    </div>\n  \n    <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"taxForm.invalid\">\n      Add\n    </button>\n  </form> -->\n  ","import { Component, OnInit } from '@angular/core';\nimport { TaxService } from '../../services/tax.service';\nimport { Tax } from '../../models/tax-management.model';\n\n@Component({\n  selector: 'app-tax-management',\n  templateUrl: './tax-management.component.html',\n  styleUrls: ['./tax-management.component.css']\n})\nexport class TaxManagementComponent implements OnInit {\n  taxes: Tax[] = [];\n  selectedTax: Tax = {\n    taxFormId: 0,\n    formType: '',\n    filingDate: new Date(),\n    totalTaxAmount: 0,\n    userId: 0\n  };\n\n  constructor(private taxService: TaxService) { }\n\n  ngOnInit(): void {\n    //this.loadTaxes();\n  }\n\n  loadTaxes(): void {\n    this.taxService.getAllTaxes().subscribe(\n      (data:Tax[]) => {\n        this.taxes = data;\n        console.log(data);\n      }\n    );\n  }\n\n  addTax(): void {\n    \n  }\n\n  // showUpdateForm(id: number): void {\n  //   // Retrieve tax details and display them in the form\n  //   const selectedTax = this.taxes.find(tax => tax.taxFormId === id);\n  //   if (selectedTax) {\n  //     this.selectedTax = { ...selectedTax };\n  //   }\n  // }\n\n  // updateTaxApi(): void {\n  //   this.taxService.updateTax(this.selectedTax.taxFormId, this.selectedTax).subscribe(\n  //     () => {\n  //       this.loadTaxes();\n  //       this.selectedTax = this.createEmptyTax(); // Clear the form\n  //     },\n  //     error => {\n  //       console.error('Error updating tax:', error);\n  //     }\n  //   );\n  // }\n\n  deleteTax(id: number): void {\n    \n  }\n\n  selectTax(tax: Tax): void {\n    \n  }\n\n  // createEmptyTax(): Tax {\n  //   return {\n  //     taxFormId: 0,\n  //     formType: '',\n  //     filingDate: new Date(),\n  //     totalTaxAmount: 0,\n  //     userId: 0\n  //   };\n  // }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}