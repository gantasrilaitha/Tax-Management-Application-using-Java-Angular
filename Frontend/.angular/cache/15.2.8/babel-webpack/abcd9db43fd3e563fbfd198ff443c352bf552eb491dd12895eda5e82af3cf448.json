{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/tax.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction TaxManagementComponent_tr_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\")(8, \"button\", 0);\n    i0.ɵɵlistener(\"click\", function TaxManagementComponent_tr_19_Template_button_click_8_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const tax_r7 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.selectTax(tax_r7));\n    });\n    i0.ɵɵtext(9, \"Select\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"button\");\n    i0.ɵɵtext(11, \"Update\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"button\");\n    i0.ɵɵtext(13, \"Delete\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const tax_r7 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(tax_r7.formType);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(tax_r7.filingDate);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(tax_r7.totalTaxAmount);\n  }\n}\nfunction TaxManagementComponent_div_28_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \" Form Type cannot be blank. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaxManagementComponent_div_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, TaxManagementComponent_div_28_small_1_Template, 2, 0, \"small\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const _r1 = i0.ɵɵreference(23);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r1.form.controls[\"formType\"] == null ? null : _r1.form.controls[\"formType\"].hasError(\"required\"));\n  }\n}\nfunction TaxManagementComponent_div_33_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \" Filing Date is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaxManagementComponent_div_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, TaxManagementComponent_div_33_small_1_Template, 2, 0, \"small\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const _r1 = i0.ɵɵreference(23);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r1.form.controls[\"filingDate\"] == null ? null : _r1.form.controls[\"filingDate\"].hasError(\"required\"));\n  }\n}\nfunction TaxManagementComponent_div_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"small\");\n    i0.ɵɵtext(2, \"Filing Date cannot be in the future.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TaxManagementComponent_div_39_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \" Total Tax Amount cannot be null. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaxManagementComponent_div_39_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \" Total Tax Amount must be positive. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaxManagementComponent_div_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, TaxManagementComponent_div_39_small_1_Template, 2, 0, \"small\", 7);\n    i0.ɵɵtemplate(2, TaxManagementComponent_div_39_small_2_Template, 2, 0, \"small\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const _r1 = i0.ɵɵreference(23);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r1.form.controls[\"totalTaxAmount\"] == null ? null : _r1.form.controls[\"totalTaxAmount\"].hasError(\"required\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r1.form.controls[\"totalTaxAmount\"] == null ? null : _r1.form.controls[\"totalTaxAmount\"].hasError(\"min\"));\n  }\n}\nfunction TaxManagementComponent_div_44_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \" UserId cannot be blank. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaxManagementComponent_div_44_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, TaxManagementComponent_div_44_small_1_Template, 2, 0, \"small\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const _r1 = i0.ɵɵreference(23);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r1.form.controls[\"userId\"] == null ? null : _r1.form.controls[\"userId\"].hasError(\"required\"));\n  }\n}\nexport class TaxManagementComponent {\n  constructor(taxService) {\n    this.taxService = taxService;\n    this.taxes = [];\n    this.selectedTax = {\n      taxFormId: 0,\n      formType: '',\n      filingDate: new Date(),\n      totalTaxAmount: 0,\n      userId: 0\n    };\n    this.dateError = false;\n  }\n  ngOnInit() {\n    this.loadTaxes();\n  }\n  // Method to validate the date\n  validateDate(event) {\n    const selectedDate = new Date(event.target.value);\n    const today = new Date();\n    this.dateError = selectedDate > today; // Check if the date is in the future\n  }\n\n  loadTaxes() {\n    this.taxService.getAllTaxes().subscribe(data => {\n      this.taxes = data;\n      console.log(data);\n    });\n  }\n  addTax() {\n    this.taxService.createTax(this.selectedTax).subscribe(res => {\n      this.loadTaxes();\n      this.selectedTax = this.createEmptyTax(); // Clear the form\n    }, error => {\n      console.error('Error creating tax:', error);\n    });\n  }\n  // showUpdateForm(id: number): void {\n  //   // Retrieve tax details and display them in the form\n  //   const selectedTax = this.taxes.find(tax => tax.taxFormId === id);\n  //   if (selectedTax) {\n  //     this.selectedTax = { ...selectedTax };\n  //   }\n  // }\n  // updateTaxApi(): void {\n  //   this.taxService.updateTax(this.selectedTax.taxFormId, this.selectedTax).subscribe(\n  //     () => {\n  //       this.loadTaxes();\n  //       this.selectedTax = this.createEmptyTax(); // Clear the form\n  //     },\n  //     error => {\n  //       console.error('Error updating tax:', error);\n  //     }\n  //   );\n  // }\n  deleteTax(id) {}\n  selectTax(tax) {\n    this.selectedTax = {\n      ...tax\n    };\n  }\n  createEmptyTax() {\n    return {\n      taxFormId: 0,\n      formType: '',\n      filingDate: new Date(),\n      totalTaxAmount: 0,\n      userId: 0\n    };\n  }\n}\nTaxManagementComponent.ɵfac = function TaxManagementComponent_Factory(t) {\n  return new (t || TaxManagementComponent)(i0.ɵɵdirectiveInject(i1.TaxService));\n};\nTaxManagementComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TaxManagementComponent,\n  selectors: [[\"app-tax-management\"]],\n  decls: 47,\n  vars: 10,\n  consts: [[3, \"click\"], [1, \"table\", \"table-striped\"], [4, \"ngFor\", \"ngForOf\"], [\"novalidate\", \"\", 3, \"ngSubmit\"], [\"taxForm\", \"ngForm\"], [\"for\", \"formType\"], [\"type\", \"text\", \"id\", \"formType\", \"name\", \"formType\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [4, \"ngIf\"], [\"for\", \"filingDate\"], [\"type\", \"date\", \"id\", \"filingDate\", \"name\", \"filingDate\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [\"for\", \"totalTaxAmount\"], [\"type\", \"number\", \"id\", \"totalTaxAmount\", \"name\", \"totalTaxAmount\", \"required\", \"\", \"min\", \"0.01\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"userId\"], [\"type\", \"number\", \"id\", \"userId\", \"name\", \"userId\", \"name\", \"userId\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\"]],\n  template: function TaxManagementComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1, \"Tax Management\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\")(3, \"h2\");\n      i0.ɵɵtext(4, \"Tax Management\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function TaxManagementComponent_Template_button_click_5_listener() {\n        return ctx.loadTaxes();\n      });\n      i0.ɵɵtext(6, \"Refresh Taxes\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"table\", 1)(8, \"thead\")(9, \"tr\")(10, \"th\");\n      i0.ɵɵtext(11, \"FormType\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"th\");\n      i0.ɵɵtext(13, \"FilingDate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"th\");\n      i0.ɵɵtext(15, \"TaxAmount\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"th\");\n      i0.ɵɵtext(17, \"Action\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(18, \"tbody\");\n      i0.ɵɵtemplate(19, TaxManagementComponent_tr_19_Template, 14, 3, \"tr\", 2);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(20, \"h3\");\n      i0.ɵɵtext(21, \"Add Tax\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"form\", 3, 4);\n      i0.ɵɵlistener(\"ngSubmit\", function TaxManagementComponent_Template_form_ngSubmit_22_listener() {\n        return ctx.addTax();\n      });\n      i0.ɵɵelementStart(24, \"div\")(25, \"label\", 5);\n      i0.ɵɵtext(26, \"Form Type\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(27, \"input\", 6);\n      i0.ɵɵlistener(\"ngModelChange\", function TaxManagementComponent_Template_input_ngModelChange_27_listener($event) {\n        return ctx.selectedTax.formType = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(28, TaxManagementComponent_div_28_Template, 2, 1, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(29, \"div\")(30, \"label\", 8);\n      i0.ɵɵtext(31, \"Filing Date\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(32, \"input\", 9);\n      i0.ɵɵlistener(\"ngModelChange\", function TaxManagementComponent_Template_input_ngModelChange_32_listener($event) {\n        return ctx.selectedTax.filingDate = $event;\n      })(\"change\", function TaxManagementComponent_Template_input_change_32_listener($event) {\n        return ctx.validateDate($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(33, TaxManagementComponent_div_33_Template, 2, 1, \"div\", 7);\n      i0.ɵɵtemplate(34, TaxManagementComponent_div_34_Template, 3, 0, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(35, \"div\")(36, \"label\", 10);\n      i0.ɵɵtext(37, \"Total Tax Amount\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(38, \"input\", 11);\n      i0.ɵɵlistener(\"ngModelChange\", function TaxManagementComponent_Template_input_ngModelChange_38_listener($event) {\n        return ctx.selectedTax.totalTaxAmount = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(39, TaxManagementComponent_div_39_Template, 3, 2, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(40, \"div\")(41, \"label\", 12);\n      i0.ɵɵtext(42, \"User ID\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(43, \"input\", 13);\n      i0.ɵɵlistener(\"ngModelChange\", function TaxManagementComponent_Template_input_ngModelChange_43_listener($event) {\n        return ctx.selectedTax.userId = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(44, TaxManagementComponent_div_44_Template, 2, 1, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(45, \"button\", 14);\n      i0.ɵɵtext(46, \"Add\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(23);\n      i0.ɵɵadvance(19);\n      i0.ɵɵproperty(\"ngForOf\", ctx.taxes);\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"ngModel\", ctx.selectedTax.formType);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", _r1.touched && !(_r1.form.controls[\"formType\"] == null ? null : _r1.form.controls[\"formType\"].valid));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.selectedTax.filingDate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", _r1.touched && !(_r1.form.controls[\"filingDate\"] == null ? null : _r1.form.controls[\"filingDate\"].valid));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.dateError);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.selectedTax.totalTaxAmount);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", _r1.touched && !(_r1.form.controls[\"totalTaxAmount\"] == null ? null : _r1.form.controls[\"totalTaxAmount\"].valid));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.selectedTax.userId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", _r1.touched && !(_r1.form.controls[\"userId\"] == null ? null : _r1.form.controls[\"userId\"].valid));\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.MinValidator, i3.NgModel, i3.NgForm],\n  styles: [\"mat-form-field[_ngcontent-%COMP%] {\\r\\n    width: 100%;\\r\\n    margin-bottom: 15px;\\r\\n  }\\r\\n  \\r\\n  button[_ngcontent-%COMP%] {\\r\\n    margin-top: 20px;\\r\\n    display: block;\\r\\n    width: 100%;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy90YXgtbWFuYWdlbWVudC90YXgtbWFuYWdlbWVudC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksV0FBVztJQUNYLG1CQUFtQjtFQUNyQjs7RUFFQTtJQUNFLGdCQUFnQjtJQUNoQixjQUFjO0lBQ2QsV0FBVztFQUNiIiwic291cmNlc0NvbnRlbnQiOlsibWF0LWZvcm0tZmllbGQge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xyXG4gIH1cclxuICBcclxuICBidXR0b24ge1xyXG4gICAgbWFyZ2luLXRvcDogMjBweDtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgfVxyXG4gICJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","TaxManagementComponent","constructor","taxService","taxFormId","formType","filingDate","Date","totalTaxAmount","userId","ngOnInit","loadTaxes","validateDate","event","selectedDate","target","value","today","dateError","getAllTaxes","subscribe","data","taxes","console","log","addTax","createTax","selectedTax","res","createEmptyTax","error","deleteTax","id","selectTax","tax","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\tax_management_angular_fsd_iiht\\FullStack-Angular-Java-Tax-Management-Solution-main\\Frontend\\src\\app\\components\\tax-management\\tax-management.component.html","D:\\tax_management_angular_fsd_iiht\\FullStack-Angular-Java-Tax-Management-Solution-main\\Frontend\\src\\app\\components\\tax-management\\tax-management.component.ts"],"sourcesContent":["<h1>Tax Management</h1>\n<div>\n\n    <h2>Tax Management</h2>\n    <button (click)=\"loadTaxes()\">Refresh Taxes</button>\n    <table class=\"table table-striped\" >\n        <thead>\n          <tr>\n            <th>FormType</th>\n            <th>FilingDate</th>\n            <th>TaxAmount</th>\n            <th>Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let tax of taxes\">\n            <td>{{ tax.formType }}</td>\n            <td>{{ tax.filingDate }}</td>\n            <td>{{tax.totalTaxAmount}}</td>\n            <td> <button (click)=\"selectTax(tax)\">Select</button>\n                <button >Update</button>\n                <button >Delete</button>\n            \n            </td>\n          </tr>\n        </tbody>\n      </table>\n    \n\n</div>\n<h3>Add Tax</h3>\n<form #taxForm=\"ngForm\" (ngSubmit)=\"addTax()\" novalidate>\n    <div>\n      <!-- Form Type -->\n      <label for=\"formType\">Form Type</label>\n      <input\n        type=\"text\"\n        id=\"formType\"\n        name=\"formType\"\n        class=\"form-control\"\n        [(ngModel)]=\"selectedTax.formType\"\n        required\n      />\n      <div *ngIf=\"taxForm.touched && !taxForm.form.controls['formType']?.valid\">\n        <small *ngIf=\"taxForm.form.controls['formType']?.hasError('required')\">\n          Form Type cannot be blank.\n        </small>\n      </div>\n    </div>\n  \n    <div>\n      <!-- Filing Date -->\n      <label for=\"filingDate\">Filing Date</label>\n      <input\n        type=\"date\"\n        id=\"filingDate\"\n        name=\"filingDate\"\n        [(ngModel)]=\"selectedTax.filingDate\"\n        required\n        class=\"form-control\"\n        (change)=\"validateDate($event)\"\n      />\n      <div *ngIf=\"taxForm.touched && !taxForm.form.controls['filingDate']?.valid\">\n        <small *ngIf=\"taxForm.form.controls['filingDate']?.hasError('required')\">\n          Filing Date is required.\n        </small>\n      </div>\n      <div *ngIf=\"dateError\">\n        <small>Filing Date cannot be in the future.</small>\n      </div>\n    </div>\n  \n    <div>\n      <!-- Total Tax Amount -->\n      <label for=\"totalTaxAmount\">Total Tax Amount</label>\n      <input\n        type=\"number\"\n        id=\"totalTaxAmount\"\n        name=\"totalTaxAmount\"\n        [(ngModel)]=\"selectedTax.totalTaxAmount\"\n        required\n        class=\"form-control\"\n        min=\"0.01\"\n      />\n      <div *ngIf=\"taxForm.touched && !taxForm.form.controls['totalTaxAmount']?.valid\">\n        <small *ngIf=\"taxForm.form.controls['totalTaxAmount']?.hasError('required')\">\n          Total Tax Amount cannot be null.\n        </small>\n        <small *ngIf=\"taxForm.form.controls['totalTaxAmount']?.hasError('min')\">\n          Total Tax Amount must be positive.\n        </small>\n      </div>\n    </div>\n  \n    <div>\n      <!-- User ID -->\n      <label for=\"userId\">User ID</label>\n      <input\n        type=\"number\"\n        id=\"userId\"\n        name=\"userId\"\n        [(ngModel)]=\"selectedTax.userId\" name=\"userId\"\n        required\n        class=\"form-control\"\n      />\n      <div *ngIf=\"taxForm.touched && !taxForm.form.controls['userId']?.valid\">\n        <small *ngIf=\"taxForm.form.controls['userId']?.hasError('required')\">\n          UserId cannot be blank.\n        </small>\n      </div>\n    </div>\n  \n    <button type=\"submit\" >Add</button>\n  </form>\n  ","import { Component, OnInit } from '@angular/core';\nimport { TaxService } from '../../services/tax.service';\nimport { Tax } from '../../models/tax-management.model';\n\n@Component({\n  selector: 'app-tax-management',\n  templateUrl: './tax-management.component.html',\n  styleUrls: ['./tax-management.component.css']\n})\nexport class TaxManagementComponent implements OnInit {\n  taxes: Tax[] = [];\n  selectedTax: Tax = {\n    taxFormId: 0,\n    formType: '',\n    filingDate: new Date(),\n    totalTaxAmount: 0,\n    userId: 0\n  };\n  dateError: boolean=false;\n\n  constructor(private taxService: TaxService) { }\n\n  ngOnInit(): void {\n    this.loadTaxes();\n  }\n\n  // Method to validate the date\n  validateDate(event: any): void {\n    const selectedDate = new Date(event.target.value);\n    const today = new Date();\n    this.dateError = selectedDate > today; // Check if the date is in the future\n  }\n  loadTaxes(): void {\n    this.taxService.getAllTaxes().subscribe(\n      (data:Tax[]) => {\n        this.taxes = data;\n        console.log(data);\n      }\n    );\n  }\n\n  addTax(): void {\n    this.taxService.createTax(this.selectedTax).subscribe(\n      (res)=>{\n        this.loadTaxes();\n        this.selectedTax = this.createEmptyTax(); // Clear the form\n      },\n      (error)=>{\n        console.error('Error creating tax:', error);\n      }\n    )\n    \n  }\n\n  // showUpdateForm(id: number): void {\n  //   // Retrieve tax details and display them in the form\n  //   const selectedTax = this.taxes.find(tax => tax.taxFormId === id);\n  //   if (selectedTax) {\n  //     this.selectedTax = { ...selectedTax };\n  //   }\n  // }\n\n  // updateTaxApi(): void {\n  //   this.taxService.updateTax(this.selectedTax.taxFormId, this.selectedTax).subscribe(\n  //     () => {\n  //       this.loadTaxes();\n  //       this.selectedTax = this.createEmptyTax(); // Clear the form\n  //     },\n  //     error => {\n  //       console.error('Error updating tax:', error);\n  //     }\n  //   );\n  // }\n\n  deleteTax(id: number): void {\n    \n  }\n\n  selectTax(tax: Tax): void {\n    this.selectedTax={...tax};\n  }\n\n  createEmptyTax(): Tax {\n    return {\n      taxFormId: 0,\n      formType: '',\n      filingDate: new Date(),\n      totalTaxAmount: 0,\n      userId: 0\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}